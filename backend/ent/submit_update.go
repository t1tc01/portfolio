// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/t1tc01/backend-portfolio/ent/predicate"
	"github.com/t1tc01/backend-portfolio/ent/submit"
)

// SubmitUpdate is the builder for updating Submit entities.
type SubmitUpdate struct {
	config
	hooks    []Hook
	mutation *SubmitMutation
}

// Where appends a list predicates to the SubmitUpdate builder.
func (su *SubmitUpdate) Where(ps ...predicate.Submit) *SubmitUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUsername sets the "username" field.
func (su *SubmitUpdate) SetUsername(s string) *SubmitUpdate {
	su.mutation.SetUsername(s)
	return su
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (su *SubmitUpdate) SetNillableUsername(s *string) *SubmitUpdate {
	if s != nil {
		su.SetUsername(*s)
	}
	return su
}

// SetEmail sets the "email" field.
func (su *SubmitUpdate) SetEmail(s string) *SubmitUpdate {
	su.mutation.SetEmail(s)
	return su
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (su *SubmitUpdate) SetNillableEmail(s *string) *SubmitUpdate {
	if s != nil {
		su.SetEmail(*s)
	}
	return su
}

// SetMessage sets the "message" field.
func (su *SubmitUpdate) SetMessage(s string) *SubmitUpdate {
	su.mutation.SetMessage(s)
	return su
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (su *SubmitUpdate) SetNillableMessage(s *string) *SubmitUpdate {
	if s != nil {
		su.SetMessage(*s)
	}
	return su
}

// Mutation returns the SubmitMutation object of the builder.
func (su *SubmitUpdate) Mutation() *SubmitMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubmitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubmitUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubmitUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubmitUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SubmitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(submit.Table, submit.Columns, sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Username(); ok {
		_spec.SetField(submit.FieldUsername, field.TypeString, value)
	}
	if value, ok := su.mutation.Email(); ok {
		_spec.SetField(submit.FieldEmail, field.TypeString, value)
	}
	if value, ok := su.mutation.Message(); ok {
		_spec.SetField(submit.FieldMessage, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubmitUpdateOne is the builder for updating a single Submit entity.
type SubmitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubmitMutation
}

// SetUsername sets the "username" field.
func (suo *SubmitUpdateOne) SetUsername(s string) *SubmitUpdateOne {
	suo.mutation.SetUsername(s)
	return suo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (suo *SubmitUpdateOne) SetNillableUsername(s *string) *SubmitUpdateOne {
	if s != nil {
		suo.SetUsername(*s)
	}
	return suo
}

// SetEmail sets the "email" field.
func (suo *SubmitUpdateOne) SetEmail(s string) *SubmitUpdateOne {
	suo.mutation.SetEmail(s)
	return suo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suo *SubmitUpdateOne) SetNillableEmail(s *string) *SubmitUpdateOne {
	if s != nil {
		suo.SetEmail(*s)
	}
	return suo
}

// SetMessage sets the "message" field.
func (suo *SubmitUpdateOne) SetMessage(s string) *SubmitUpdateOne {
	suo.mutation.SetMessage(s)
	return suo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (suo *SubmitUpdateOne) SetNillableMessage(s *string) *SubmitUpdateOne {
	if s != nil {
		suo.SetMessage(*s)
	}
	return suo
}

// Mutation returns the SubmitMutation object of the builder.
func (suo *SubmitUpdateOne) Mutation() *SubmitMutation {
	return suo.mutation
}

// Where appends a list predicates to the SubmitUpdate builder.
func (suo *SubmitUpdateOne) Where(ps ...predicate.Submit) *SubmitUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubmitUpdateOne) Select(field string, fields ...string) *SubmitUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Submit entity.
func (suo *SubmitUpdateOne) Save(ctx context.Context) (*Submit, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubmitUpdateOne) SaveX(ctx context.Context) *Submit {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubmitUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubmitUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SubmitUpdateOne) sqlSave(ctx context.Context) (_node *Submit, err error) {
	_spec := sqlgraph.NewUpdateSpec(submit.Table, submit.Columns, sqlgraph.NewFieldSpec(submit.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Submit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, submit.FieldID)
		for _, f := range fields {
			if !submit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != submit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Username(); ok {
		_spec.SetField(submit.FieldUsername, field.TypeString, value)
	}
	if value, ok := suo.mutation.Email(); ok {
		_spec.SetField(submit.FieldEmail, field.TypeString, value)
	}
	if value, ok := suo.mutation.Message(); ok {
		_spec.SetField(submit.FieldMessage, field.TypeString, value)
	}
	_node = &Submit{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
